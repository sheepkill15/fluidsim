#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform readonly image2D img_input;
layout(rgba32f, binding = 3) uniform writeonly image2D img_output;

uniform double deltaTime;

layout(std140, binding = 2) uniform WindowSize {
    uint width;
    uint height;
};

const float k = 20;
const uint iterations = 5;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

uint indexFromCoords(ivec2 coords) {
    return coords.y * width + coords.x;
}

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    uint index = indexFromCoords(coords);

    int cell = imageLoad(img_input, coords) == vec4(1) ? 1 : 0;
    int aliveN = 0;

    for(int i = -1; i <= 1; i++) {
        for(int j = -1; j <= 1; j++) {
            if(i == 0 && j == 0) continue;
            aliveN += imageLoad(img_input, ivec2(min(max(coords.x + i, 0), width - 1), min(max(coords.y + j, 0), height - 1))) == vec4(1) ? 1 : 0;
        }
    }

    if(cell == 1) {
        if(aliveN < 2) {
            cell = 0;
        }
        else if(aliveN > 3) {
            cell = 0;
        }
    }
    else {
        if(aliveN == 3) {
            cell = 1;
        }
    }
    vec4 pixel = vec4(cell);

    imageStore(img_output, coords, pixel);
}
